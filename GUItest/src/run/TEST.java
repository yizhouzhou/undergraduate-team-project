package run;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 *changed-verify zhou
 *try add extension test


 */
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.mail.PasswordAuthentication;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *modify by yizhouzhou 
 *designed by Klous 
 */
public class TEST extends javax.swing.JFrame {

    static private Connection c;

    public static Connection getCon() throws Exception {
        // information
        if (c == null) {
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/testproject", "root",
                    "235689@Xzyz");
            System.out.println("Successfully connect to database");

        }

        return c;
    }

    public static Statement getstate() throws Exception {
        // information
        Statement myStmt = TEST.getCon().createStatement();
        return myStmt;
    }

    /**
     * Creates new form TEST
     */
    public TEST() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonGroupDisplay = new javax.swing.ButtonGroup();
        jTabbedPaneStatusChange = new javax.swing.JTabbedPane();
        jScrollPaneAll = new javax.swing.JScrollPane();
        jTableAll = new javax.swing.JTable();
        jScrollPaneAccepted = new javax.swing.JScrollPane();
        jTableAccepted = new javax.swing.JTable();
        jScrollPaneInquired = new javax.swing.JScrollPane();
        jTableInquired = new javax.swing.JTable();
        jScrollPanePartapp = new javax.swing.JScrollPane();
        jTablePartapp = new javax.swing.JTable();
        jScrollPaneCompleted = new javax.swing.JScrollPane();
        jTableCompleted = new javax.swing.JTable();
        jScrollPaneApplied = new javax.swing.JScrollPane();
        jTableApplied = new javax.swing.JTable();
        jScrollPaneDeposit = new javax.swing.JScrollPane();
        jTableDeposit = new javax.swing.JTable();
        jScrollPaneCommitted = new javax.swing.JScrollPane();
        jTableCommitted = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabelMessage = new javax.swing.JLabel();
        jButtonRefresh = new javax.swing.JButton();
        jRadioButtonAll = new javax.swing.JRadioButton();
        jRadioButtonCompleted = new javax.swing.JRadioButton();
        jRadioButtonNotCompleted = new javax.swing.JRadioButton();
        jLabelCellNum = new javax.swing.JLabel();
        jLabelAddress = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jLabelAction = new javax.swing.JLabel();
        jTextFieldEmail = new javax.swing.JTextField();
        jLabelHomeNum = new javax.swing.JLabel();
        jTextFieldCellNum = new javax.swing.JTextField();
        jTextFieldHomeNum = new javax.swing.JTextField();
        jTextFieldAddress = new javax.swing.JTextField();
        jTextFieldAction = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaMessage = new javax.swing.JTextArea();
        jButtonCopyEmail = new javax.swing.JButton();
        jButtonCopyAddress = new javax.swing.JButton();
        jButtonCopyMsg = new javax.swing.JButton();
        jButtonSend = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPaneStatusChange.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPaneStatusChange.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTabbedPaneStatusChange.setName(""); // NOI18N

        jTableAll.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAll.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAllMouseClicked(evt);
            }
        });
        jScrollPaneAll.setViewportView(jTableAll);

        jTabbedPaneStatusChange.addTab("All", jScrollPaneAll);

        jTableAccepted.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableAccepted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAccepted.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableAccepted.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAcceptedMouseClicked(evt);
            }
        });
        jScrollPaneAccepted.setViewportView(jTableAccepted);

        jTabbedPaneStatusChange.addTab("Accepted", jScrollPaneAccepted);

        jTableInquired.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableInquired.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableInquired.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableInquired.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableInquiredMouseClicked(evt);
            }
        });
        jScrollPaneInquired.setViewportView(jTableInquired);

        jTabbedPaneStatusChange.addTab("Inquired", jScrollPaneInquired);

        jTablePartapp.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTablePartapp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePartapp.getModel().addTableModelListener(new CheckBoxModelListener());
        jTablePartapp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePartappMouseClicked(evt);
            }
        });
        jScrollPanePartapp.setViewportView(jTablePartapp);

        jTabbedPaneStatusChange.addTab("Partapp", jScrollPanePartapp);

        jTableCompleted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCommitted.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableCompleted.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCompletedMouseClicked(evt);
            }
        });
        jScrollPaneCompleted.setViewportView(jTableCompleted);

        jTabbedPaneStatusChange.addTab("Completed", jScrollPaneCompleted);

        jTableApplied.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableApplied.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableApplied.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableApplied.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAppliedMouseClicked(evt);
            }
        });
        jScrollPaneApplied.setViewportView(jTableApplied);

        jTabbedPaneStatusChange.addTab("Applied", jScrollPaneApplied);

        jTableDeposit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDeposit.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableDeposit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDepositMouseClicked(evt);
            }
        });
        jScrollPaneDeposit.setViewportView(jTableDeposit);

        jTabbedPaneStatusChange.addTab("Deposit", jScrollPaneDeposit);

        jTableCommitted.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTableCommitted.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Status", "Date", "Completed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCommitted.getModel().addTableModelListener(new CheckBoxModelListener());
        jTableCommitted.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCommittedMouseClicked(evt);
            }
        });
        jScrollPaneCommitted.setViewportView(jTableCommitted);

        jTabbedPaneStatusChange.addTab("Committed", jScrollPaneCommitted);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Selected Student");

        jLabelMessage.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelMessage.setText("Message");

        jButtonRefresh.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonRefresh.setText("Refresh");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        buttonGroupDisplay.add(jRadioButtonAll);
        jRadioButtonAll.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonAll.setText("ALL");
        jRadioButtonAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAllActionPerformed(evt);
            }
        });

        buttonGroupDisplay.add(jRadioButtonCompleted);
        jRadioButtonCompleted.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonCompleted.setText("Completed");
        jRadioButtonCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonCompletedActionPerformed(evt);
            }
        });

        buttonGroupDisplay.add(jRadioButtonNotCompleted);
        jRadioButtonNotCompleted.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jRadioButtonNotCompleted.setText("Not Completed");
        jRadioButtonNotCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonNotCompletedActionPerformed(evt);
            }
        });

        jLabelCellNum.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelCellNum.setText("Cell Num:");

        jLabelAddress.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelAddress.setText("Address:");

        jLabelEmail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelEmail.setText("Email:");

        jLabelAction.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelAction.setText("Action:");

        jTextFieldEmail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabelHomeNum.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabelHomeNum.setText("Home Num:");

        jTextFieldCellNum.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextFieldHomeNum.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextFieldAddress.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextFieldAction.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jTextAreaMessage.setColumns(20);
        jTextAreaMessage.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jTextAreaMessage.setRows(5);
        jTextAreaMessage.setLineWrap(true);
        jScrollPane1.setViewportView(jTextAreaMessage);

        jButtonCopyEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonCopyEmail.setText("Copy Email");
        jButtonCopyEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyEmailActionPerformed(evt);
            }
        });

        jButtonCopyAddress.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonCopyAddress.setText("Copy Address");
        jButtonCopyAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyAddressActionPerformed(evt);
            }
        });

        jButtonCopyMsg.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonCopyMsg.setText("Copy Msg");
        jButtonCopyMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyMsgActionPerformed(evt);
            }
        });

        jButtonSend.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");

        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuHelp.setText("Help");

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTabbedPaneStatusChange, javax.swing.GroupLayout.PREFERRED_SIZE, 1073, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonRefresh)
                                .addGap(39, 39, 39))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jRadioButtonCompleted, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jRadioButtonAll, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jRadioButtonNotCompleted))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelHomeNum, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldHomeNum)
                                    .addComponent(jTextFieldCellNum)
                                    .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCopyEmail)
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(206, 206, 206)
                                        .addComponent(jLabelMessage))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(249, 249, 249)
                                .addComponent(jLabelAction, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldAction, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelCellNum)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jTextFieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonCopyAddress)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonCopyMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSend, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jRadioButtonNotCompleted)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButtonCompleted)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonAll)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(24, Short.MAX_VALUE)
                        .addComponent(jTabbedPaneStatusChange, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMessage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonCopyMsg)
                                .addGap(28, 28, 28)
                                .addComponent(jButtonSend)
                                .addGap(46, 46, 46))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabelAction)
                            .addComponent(jTextFieldAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCopyEmail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCellNum, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCellNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelHomeNum)
                            .addComponent(jTextFieldHomeNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCopyAddress))))
                .addGap(21, 21, 21))
        );

        jTabbedPaneStatusChange.getAccessibleContext().setAccessibleName("All");

        getAccessibleContext().setAccessibleName("All");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        try {
            //Class.forName("com.mysql.jdbc.Driver"); 
            //Connection con = TEST.getCon();
            Statement myStmt = TEST.getCon().createStatement();

            int nodate = 0;

            DefaultTableModel tbAllModel = (DefaultTableModel) jTableAll.getModel();
            //tbAllModel.setRowCount(0);
            int tbAllrow = tbAllModel.getRowCount();

            DefaultTableModel tbAcceptedModel = (DefaultTableModel) jTableAccepted.getModel();
            //tbAcceptedModel.setRowCount(0);
            int tbAcceptedrow = tbAcceptedModel.getRowCount();

            DefaultTableModel tbInquiredModel = (DefaultTableModel) jTableInquired.getModel();
            //tbInquiredModel.setRowCount(0);
            int tbInquiredrow = tbInquiredModel.getRowCount();

            DefaultTableModel tbPartappModel = (DefaultTableModel) jTablePartapp.getModel();
            //tbPartappModel.setRowCount(0);
            int tbPartApprow = tbPartappModel.getRowCount();

            DefaultTableModel tbAppliedModel = (DefaultTableModel) jTableApplied.getModel();
            //tbAppliedModel.setRowCount(0);
            int tbAppliedrow = tbAppliedModel.getRowCount();

            DefaultTableModel tbCommittedModel = (DefaultTableModel) jTableCommitted.getModel();
            //tbCommittedModel.setRowCount(0);
            int tbCommittedrow = tbCommittedModel.getRowCount();

            DefaultTableModel tbCompletedModel = (DefaultTableModel) jTableCompleted.getModel();
            //tbCompletedModel.setRowCount(0);
            int tbCompletedrow = tbCompletedModel.getRowCount();

            DefaultTableModel tbDepositModel = (DefaultTableModel) jTableDeposit.getModel();
            //tbDepositModel.setRowCount(0);
            int tbDepositrow = tbDepositModel.getRowCount();

            //for alltable
            for (int n = 0; n <= tbAllrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbAllModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbAllModel.removeRow(n);
                    n--;
                    tbAllrow = tbAllModel.getRowCount();
                }

            }

            //for accepted table
            for (int n = 0; n <= tbAcceptedrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbAcceptedModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbAcceptedModel.removeRow(n);
                    n--;
                    tbAcceptedrow = tbAcceptedModel.getRowCount();
                }
            }

            //for applied table
            for (int n = 0; n <= tbAppliedrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbAppliedModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbAppliedModel.removeRow(n);
                    n--;
                    tbAppliedrow = tbAppliedModel.getRowCount();
                }
            }

            //Committed table
            for (int n = 0; n <= tbCommittedrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbCommittedModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbCommittedModel.removeRow(n);
                    n--;
                    tbCommittedrow = tbCommittedModel.getRowCount();
                }
            }

            //Completed table
            for (int n = 0; n <= tbCompletedrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbCompletedModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbCompletedModel.removeRow(n);
                    n--;
                    tbCompletedrow = tbCompletedModel.getRowCount();
                }
            }
            //DEposit table
            for (int n = 0; n <= tbDepositrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbDepositModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbDepositModel.removeRow(n);
                    n--;
                    tbDepositrow = tbDepositModel.getRowCount();
                }
            }
            //inquired
            for (int n = 0; n <= tbInquiredrow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbInquiredModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbInquiredModel.removeRow(n);
                    n--;
                    tbInquiredrow = tbInquiredModel.getRowCount();
                }
            }
            //PartApp
            for (int n = 0; n <= tbPartApprow - 1; n++) {

                //tbAllrow = tbAllModel.getRowCount();
                Boolean checked = (Boolean) tbPartappModel.getValueAt(n, 4);

                if (!(checked == true)) {
                } else {
                    tbPartappModel.removeRow(n);
                    n--;
                    tbPartApprow = tbPartappModel.getRowCount();
                }
            }

            //table all
            String sql = "SELECT status.id,CONCAT(student.first, ' ', student.last) As name,status.statusChange,statusDate,completed FROM student LEFT JOIN status ON student.id = status.id where completed = 'n'";
            ResultSet rs = myStmt.executeQuery(sql);

            while (rs.next()) {
                
                String id = rs.getString("status.id");
                String name = rs.getString("name");
                String status = rs.getString("status.statusChange");
                String date = rs.getString("statusDate");
                String completed = rs.getString("completed");
                boolean Completed = false;
                if (completed.equals("y")) {
                    Completed = true;
                }

                Object[] row = {id, name, status, date, Completed};

                if (tbAllrow == nodate) {
                    jRadioButtonNotCompleted.setSelected(true);
                    //Object[] row = {name, status, date, Completed};
                    tbAllModel.addRow(row);
                }

                //Object[] row = { name, status, date, Completed };
                //tbAllModel.addRow(row);
                //2
                if (tbAcceptedrow == nodate && status.equalsIgnoreCase("accepted")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    //Object[] row = {name, status, date, Completed};
                    tbAcceptedModel.addRow(row);
                }

                //3
                if (tbAppliedrow == nodate && status.equalsIgnoreCase("applied")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    //Object[] row = {name, status, date, Completed};
                    tbAppliedModel.addRow(row);
                }

                //4
                if (tbCommittedrow == nodate && status.equalsIgnoreCase("committed")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    tbCommittedModel.addRow(row);
                }

                //5
                if (tbCompletedrow == nodate && status.equalsIgnoreCase("completed")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    tbCompletedModel.addRow(row);
                }

                //6
                if (tbDepositrow == nodate && status.equalsIgnoreCase("deposit")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    tbDepositModel.addRow(row);
                }

                //7
                if (tbInquiredrow == nodate && status.equalsIgnoreCase("inquired")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    tbInquiredModel.addRow(row);
                }

                //8
                if (tbPartApprow == nodate && status.equalsIgnoreCase("partapp")) {
                    jRadioButtonNotCompleted.setSelected(true);
                    tbPartappModel.addRow(row);
                }
            }

            jRadioButtonNotCompleted.setSelected(true);
            jTextFieldAction.setText("");
            jTextFieldCellNum.setText("");
            jTextFieldHomeNum.setText("");
            jTextFieldEmail.setText("");
            jTextFieldAddress.setText("");
            jTextAreaMessage.setText("");

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenActionPerformed
        // TODO add your handling code here:

        jTextAreaMessage.setText(" ");
        jTextFieldAction.setText(" ");
        jTextFieldAddress.setText(" ");
        jTextFieldCellNum.setText(" ");
        jTextFieldEmail.setText(" ");
        jTextFieldHomeNum.setText(" ");
        DefaultTableModel tbAllModel = (DefaultTableModel) jTableAll.getModel();
        tbAllModel.setRowCount(0);
        DefaultTableModel tbAcceptedModel = (DefaultTableModel) jTableAccepted.getModel();
        tbAcceptedModel.setRowCount(0);
        DefaultTableModel tbInquiredModel = (DefaultTableModel) jTableInquired.getModel();
        tbInquiredModel.setRowCount(0);
        DefaultTableModel tbPartappModel = (DefaultTableModel) jTablePartapp.getModel();
        tbPartappModel.setRowCount(0);
        DefaultTableModel tbAppliedModel = (DefaultTableModel) jTableApplied.getModel();
        tbAppliedModel.setRowCount(0);
        DefaultTableModel tbCommittedModel = (DefaultTableModel) jTableCommitted.getModel();
        tbCommittedModel.setRowCount(0);
        DefaultTableModel tbCompletedModel = (DefaultTableModel) jTableCompleted.getModel();
        tbCompletedModel.setRowCount(0);
        DefaultTableModel tbDepositModel = (DefaultTableModel) jTableDeposit.getModel();
        tbDepositModel.setRowCount(0);
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        //get the file path
        String path = f.getAbsolutePath();

        String line = "";

        try {

            jRadioButtonNotCompleted.setSelected(false);
            // connect to database
            Statement myStmt = TEST.getCon().createStatement();

            // get the csv file
            BufferedReader csvFile = new BufferedReader(new FileReader(path));
            csvFile.readLine();// Eliminate the first line from CSV file

            //read csv file line by line, cell by cell
            while ((line = csvFile.readLine()) != null) {
                String[] values = line.split(",", -1);
                // Distinguish different field of CSV file 

                //modify by mike zhou: add the date parese;
                SimpleDateFormat inputformatter = new SimpleDateFormat("MM/DD/YYYY");

                SimpleDateFormat outputdate = new SimpleDateFormat("yyyy-MM-dd");

                String csvStudID = values[0];
                String csvStudLastName = values[1];
                String csvSFirstName = values[2];
                String csvAddress1 = values[3];
                String csvAddress2 = values[4];
                String csvCity = values[5];
                String csvState = values[6];
                String csvZipCode = values[7];
                String csvCountry = values[8];
                String csvCellNum = values[9];
                String csvHomeNum = values[10];
                String csvEmail = values[11];
                String csvGender = values[12];
                String csvHispanic = values[13];
                if (csvHispanic.equalsIgnoreCase("yes")) {
                    csvHispanic = "y";
                } else {
                    csvHispanic = "n";
                }
                String csvRace = values[14];
                String csvHighSchool = values[15];
                String csvGPA = values[16];
                String csvSAT = values[17];
                String csvACT = values[18];
                String csvAlumni = values[19];
                if (csvAlumni.equalsIgnoreCase("yes")) {
                    csvAlumni = "y";
                } else {
                    csvAlumni = "n";
                }
                String csvDenomination = values[20];
                String csvMajor1 = values[21];
                String csvMajor2 = values[22];
                String csvMajor3 = values[23];
                String csvMajor4 = values[24];
                String csvCounselorName = values[25];
                String csvAdmissionStatus = values[26];

                //modify the date by mike zhou, any date format can work 
                String csvLastStatusChangerequire = values[27];
                String csvStatusDate = null;
                Date statusdate = null;
                statusdate = inputformatter.parse(csvLastStatusChangerequire);
                csvStatusDate = outputdate.format(statusdate);
                //System.out.println(csvStatusDate);

                String csvEnrollment = values[28];
                char csvVisit = values[29].charAt(0);
                if (csvVisit == 'N') {
                    csvVisit = 'n';
                } else {
                    csvVisit = 'y';
                }

                //modify the date by mike zhou, any date format can work 
                String csvVisitDaterequire = values[30];
                String csvVisitDate = null;
                Date date = null;
                //Date dateblank = null;
                //dateblank = inputblankformatter.parse(csvVisitDaterequire);

                if (csvVisitDaterequire.equals("")) {
                    csvVisitDate = "";
                } else {
                    date = inputformatter.parse(csvVisitDaterequire);
                    csvVisitDate = outputdate.format(date);
                    System.out.println(csvVisitDate);
                }

                ResultSet findStudent = myStmt.executeQuery("SELECT * FROM student WHERE student.id = '" + csvStudID + "'");  //ready for detecting the student' ID in database
                boolean newStudent = !findStudent.next();

                //if it is a new student, then need to add data to student table
                //INSERT INTO status (fk_StudID,StatusChang,DateStatChang) VALUES ('csvStudID','csvStatus','csvDate');
                if (newStudent) {
                    System.out.println("New student id: " + csvStudID);
                    myStmt.executeUpdate(
                            "INSERT INTO student (id,last,first,address1,address2,city,state,zip,country,cellNum,homeNum,email,gender,hispanic,race,highSchool,GPA,SAT,ACT,alumni,denomination,major1,major2,major3,major4,counselor,enrollPeriod,visit)"
                            + " " + "VALUES ('" + csvStudID + "','" + csvStudLastName + "','" + csvSFirstName
                            + "','" + csvAddress1 + "','" + csvAddress2 + "','" + csvCity + "','" + csvState
                            + "','" + csvZipCode + "','" + csvCountry + "','" + csvCellNum + "','" + csvHomeNum
                            + "','" + csvEmail + "','" + csvGender + "','" + csvHispanic + "','" + csvRace
                            + "','" + csvHighSchool + "','" + csvGPA + "','" + csvSAT + "','" + csvACT + "','"
                            + csvAlumni + "','" + csvDenomination + "','" + csvMajor1 + "','" + csvMajor2
                            + "','" + csvMajor3 + "','" + csvMajor4 + "','" + csvCounselorName + "','"
                            + csvEnrollment + "','" + csvVisit + "')");

                    if (csvVisitDate.equals("")) {
                        myStmt.executeUpdate("UPDATE student set visitDate = null where student.id = '" + csvStudID + "'");
                    } else {
                        myStmt.executeUpdate("UPDATE student set visitDate = '" + csvVisitDate + "' where student.id = '" + csvStudID + "'");
                    }
                    myStmt.executeUpdate("INSERT INTO status (status.id,status.statusChange,statusDate) "
                            + "VALUES ('" + csvStudID + "','" + csvAdmissionStatus + "','" + csvStatusDate + "')");
                } // if it is a existing student, then do not need to add data to student table
                // and also need to detect the status change
                else {
                    System.out.println("Existing student id: " + csvStudID);
                    // Update the information for student (Name, Address, Email...)
                    myStmt.executeUpdate("UPDATE student set last = '" + csvStudLastName + "', first = '"
                            + csvSFirstName + "',address1 = '" + csvAddress1 + "',address2 = '" + csvAddress2
                            + "',city = '" + csvCity + "',state = '" + csvState + "',zip = '" + csvZipCode
                            + "',country = '" + csvCountry + "',cellNum = '" + csvCellNum + "',homeNum = '" + csvHomeNum
                            + "',email = '" + csvEmail + "',gender = '" + csvGender + "',hispanic = '" + csvHispanic + "' WHERE student.id = '" + csvStudID + "'");
                    myStmt.executeUpdate("UPDATE student set race = '" + csvRace + "',highSchool = '" + csvHighSchool
                            + "',GPA = '" + csvGPA + "',ACT = '" + csvACT + "',SAT = '" + csvSAT + "',alumni = '"
                            + csvAlumni + "',denomination = '" + csvDenomination + "',major1 = '" + csvMajor1
                            + "',major2 = '" + csvMajor2 + "',major3 = '" + csvMajor3 + "',major4 = '" + csvMajor4
                            + "',counselor = '" + csvCounselorName + "',enrollPeriod = '" + csvEnrollment
                            + "',visit = '" + csvVisit + "' WHERE student.id = '"
                            + csvStudID + "'");

                    if (csvVisitDate.equals("")) {
                        myStmt.executeUpdate("UPDATE student set visitDate = null where student.id = '" + csvStudID + "'");
                    } else {
                        myStmt.executeUpdate("UPDATE student set visitDate = '" + csvVisitDate + "' where student.id = '" + csvStudID + "'");
                    }

                    // Insert new status
                    String sql = "SELECT status.id, status.statusChange from status where status.id = '" + csvStudID + "'";
                    ResultSet rs = myStmt.executeQuery(sql);

                    boolean statusSame = false;

                    while (rs.next()) {
                        String status = rs.getString("status.statusChange");
                        if (csvAdmissionStatus.equalsIgnoreCase(status)) {
                            System.out.println("Same");
                            statusSame = true;
                        }
                    }

                    if (statusSame == false) {
                        myStmt.executeUpdate("INSERT INTO status (status.id,status.statusChange,statusDate) "
                                + "VALUES ('" + csvStudID + "','" + csvAdmissionStatus + "','" + csvStatusDate + "')");
                    }
                }

                System.out.println("##########################");

                //modify the show into the table by mike zhou
                String name = csvSFirstName + " " + csvStudLastName;
                System.out.println(name);

                Object tbData[] = {csvStudID, name, csvAdmissionStatus, csvStatusDate, false};

                //1
                //DefaultTableModel tbAllModel = (DefaultTableModel) jTableAll.getModel();
                tbAllModel.addRow(tbData);

                //2
                //DefaultTableModel tbAcceptedModel = (DefaultTableModel) jTableAccepted.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("accepted")) {
                    tbAcceptedModel.addRow(tbData);
                }

                //3
                //DefaultTableModel tbAppliedModel = (DefaultTableModel) jTableApplied.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("applied")) {
                    tbAppliedModel.addRow(tbData);
                }

                //4
                //DefaultTableModel tbCommittedModel = (DefaultTableModel) jTableCommitted.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("committed")) {
                    tbCommittedModel.addRow(tbData);
                }

                //5
                //DefaultTableModel tbCompletedModel = (DefaultTableModel) jTableCompleted.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("completed")) {
                    tbCompletedModel.addRow(tbData);
                }

                //6
                //DefaultTableModel tbDepositModel = (DefaultTableModel) jTableDeposit.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("deposit")) {
                    tbDepositModel.addRow(tbData);
                }

                //7
                //DefaultTableModel tbInquiredModel = (DefaultTableModel) jTableInquired.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("inquired")) {
                    tbInquiredModel.addRow(tbData);
                }

                //8
                //DefaultTableModel tbPartAppModel = (DefaultTableModel) jTablePartApp.getModel();
                if (csvAdmissionStatus.equalsIgnoreCase("partapp")) {
                    tbPartappModel.addRow(tbData);
                }
            }
            System.out.println("Successfully update data");

            //jButtonRefresh.performClick();
            jRadioButtonNotCompleted.setSelected(true);

            /*       
            DefaultTableModel tbAllModel = (DefaultTableModel)jTableAll.getModel();
            tbAllModel.setRowCount(0);
            DefaultTableModel tbAcceptedModel = (DefaultTableModel)jTableAccepted.getModel();  
            tbAcceptedModel.setRowCount(0);
            DefaultTableModel tbInquiredModel = (DefaultTableModel)jTableInquired.getModel();
            tbInquiredModel.setRowCount(0);
            DefaultTableModel tbPartappModel = (DefaultTableModel)jTablePartapp.getModel();
            tbPartappModel.setRowCount(0);
            DefaultTableModel tbAppliedModel = (DefaultTableModel)jTableApplied.getModel();
            tbAppliedModel.setRowCount(0);
            DefaultTableModel tbCommittedModel = (DefaultTableModel)jTableCommitted.getModel();  
            tbCommittedModel.setRowCount(0);
            DefaultTableModel tbCompletedModel = (DefaultTableModel)jTableCompleted.getModel();  
            tbCompletedModel.setRowCount(0);
            DefaultTableModel tbDepositModel = (DefaultTableModel)jTableDeposit.getModel();  
            tbDepositModel.setRowCount(0);
                        //table all
            String sql = "SELECT student.id,CONCAT(student.first, ' ', student.last) As name,status.statusChange,statusDate,completed FROM student LEFT JOIN status ON student.id = status.id where completed = 'n'";
            ResultSet rs = myStmt.executeQuery(sql);
            
            while(rs.next()){

                String name = rs.getString("name");
                String status = rs.getString("status.statusChange");
                String date = rs.getString("statusDate");
                String completed = rs.getString("completed");
                boolean Completed = false;
                if(completed.equals("y")){
                    Completed = true;
                }
                
                Object[] row = { name, status, date, Completed };
                tbAllModel.addRow(row);
                
               //2
                    if (status.equalsIgnoreCase("accepted")) {
                        tbAcceptedModel.addRow(row);
                    }

                    //3
                    if (status.equalsIgnoreCase("applied")) {
                        tbAppliedModel.addRow(row);
                    }

                    //4
                    if (status.equalsIgnoreCase("committed")) {
                        tbCommittedModel.addRow(row);
                    }

                    //5
                    if (status.equalsIgnoreCase("completed")) {
                        tbCompletedModel.addRow(row);
                    }

                    //6
                    if (status.equalsIgnoreCase("deposit")) {
                        tbDepositModel.addRow(row);
                    }

                    //7
                    if (status.equalsIgnoreCase("inquired")) {
                        tbInquiredModel.addRow(row);
                    }

                    //8
                    if (status.equalsIgnoreCase("partapp")) {
                        tbPartappModel.addRow(row);
                    }
            
            }
             */
            csvFile.close();

        } catch (Exception exc) {
            exc.printStackTrace();
        }

    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jRadioButtonNotCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonNotCompletedActionPerformed
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            jTextFieldAction.setText("");
            jTextFieldCellNum.setText("");
            jTextFieldHomeNum.setText("");
            jTextFieldEmail.setText("");
            jTextFieldAddress.setText("");
            jTextAreaMessage.setText("");

            DefaultTableModel tbAllModel = (DefaultTableModel) jTableAll.getModel();
            tbAllModel.setRowCount(0);
            DefaultTableModel tbAcceptedModel = (DefaultTableModel) jTableAccepted.getModel();
            tbAcceptedModel.setRowCount(0);
            DefaultTableModel tbInquiredModel = (DefaultTableModel) jTableInquired.getModel();
            tbInquiredModel.setRowCount(0);
            DefaultTableModel tbPartappModel = (DefaultTableModel) jTablePartapp.getModel();
            tbPartappModel.setRowCount(0);
            DefaultTableModel tbAppliedModel = (DefaultTableModel) jTableApplied.getModel();
            tbAppliedModel.setRowCount(0);
            DefaultTableModel tbCommittedModel = (DefaultTableModel) jTableCommitted.getModel();
            tbCommittedModel.setRowCount(0);
            DefaultTableModel tbCompletedModel = (DefaultTableModel) jTableCompleted.getModel();
            tbCompletedModel.setRowCount(0);
            DefaultTableModel tbDepositModel = (DefaultTableModel) jTableDeposit.getModel();
            tbDepositModel.setRowCount(0);
            //table all
            String sql = "SELECT student.id,CONCAT(student.first, ' ', student.last) As name,status.statusChange,statusDate,completed FROM student LEFT JOIN status ON student.id = status.id where completed = 'n'";
            ResultSet rs = myStmt.executeQuery(sql);

            while (rs.next()) {

                String id = rs.getString("student.id");
                String name = rs.getString("name");
                String status = rs.getString("status.statusChange");
                String date = rs.getString("statusDate");
                String completed = rs.getString("completed");
                boolean Completed = false;
                if (completed.equals("y")) {
                    Completed = true;
                }

                Object[] row = {id,name, status, date, Completed};
                tbAllModel.addRow(row);
                //2
                if (status.equalsIgnoreCase("accepted")) {
                    tbAcceptedModel.addRow(row);
                }

                //3
                if (status.equalsIgnoreCase("applied")) {
                    tbAppliedModel.addRow(row);
                }

                //4
                if (status.equalsIgnoreCase("committed")) {
                    tbCommittedModel.addRow(row);
                }

                //5
                if (status.equalsIgnoreCase("completed")) {
                    tbCompletedModel.addRow(row);
                }

                //6
                if (status.equalsIgnoreCase("deposit")) {
                    tbDepositModel.addRow(row);
                }

                //7
                if (status.equalsIgnoreCase("inquired")) {
                    tbInquiredModel.addRow(row);
                }

                //8
                if (status.equalsIgnoreCase("partapp")) {
                    tbPartappModel.addRow(row);
                }
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jRadioButtonNotCompletedActionPerformed

    private void jRadioButtonCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonCompletedActionPerformed
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            jTextFieldAction.setText("");
            jTextFieldCellNum.setText("");
            jTextFieldHomeNum.setText("");
            jTextFieldEmail.setText("");
            jTextFieldAddress.setText("");
            jTextAreaMessage.setText("");

            DefaultTableModel tbAllModel = (DefaultTableModel) jTableAll.getModel();
            tbAllModel.setRowCount(0);
            DefaultTableModel tbAcceptedModel = (DefaultTableModel) jTableAccepted.getModel();
            tbAcceptedModel.setRowCount(0);
            DefaultTableModel tbInquiredModel = (DefaultTableModel) jTableInquired.getModel();
            tbInquiredModel.setRowCount(0);
            DefaultTableModel tbPartappModel = (DefaultTableModel) jTablePartapp.getModel();
            tbPartappModel.setRowCount(0);
            DefaultTableModel tbAppliedModel = (DefaultTableModel) jTableApplied.getModel();
            tbAppliedModel.setRowCount(0);
            DefaultTableModel tbCommittedModel = (DefaultTableModel) jTableCommitted.getModel();
            tbCommittedModel.setRowCount(0);
            DefaultTableModel tbCompletedModel = (DefaultTableModel) jTableCompleted.getModel();
            tbCompletedModel.setRowCount(0);
            DefaultTableModel tbDepositModel = (DefaultTableModel) jTableDeposit.getModel();
            tbDepositModel.setRowCount(0);
            //table all
            String sql = "SELECT student.id,CONCAT(student.first, ' ', student.last) As name,status.statusChange,statusDate,completed FROM student LEFT JOIN status ON student.id = status.id where completed = 'y'";
            ResultSet rs = myStmt.executeQuery(sql);

            while (rs.next()) {

                String id = rs.getString("student.id");
                String name = rs.getString("name");
                String status = rs.getString("status.statusChange");
                String date = rs.getString("statusDate");
                String completed = rs.getString("completed");
                boolean Completed = false;
                if (completed.equals("y")) {
                    Completed = true;
                }

                Object[] row = {id,name, status, date, Completed};
                tbAllModel.addRow(row);
                //2
                if (status.equalsIgnoreCase("accepted")) {
                    tbAcceptedModel.addRow(row);
                }

                //3
                if (status.equalsIgnoreCase("applied")) {
                    tbAppliedModel.addRow(row);
                }

                //4
                if (status.equalsIgnoreCase("committed")) {
                    tbCommittedModel.addRow(row);
                }

                //5
                if (status.equalsIgnoreCase("completed")) {
                    tbCompletedModel.addRow(row);
                }

                //6
                if (status.equalsIgnoreCase("deposit")) {
                    tbDepositModel.addRow(row);
                }

                //7
                if (status.equalsIgnoreCase("inquired")) {
                    tbInquiredModel.addRow(row);
                }

                //8
                if (status.equalsIgnoreCase("partapp")) {
                    tbPartappModel.addRow(row);
                }
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jRadioButtonCompletedActionPerformed

    private void jRadioButtonAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAllActionPerformed
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            jTextFieldAction.setText("");
            jTextFieldCellNum.setText("");
            jTextFieldHomeNum.setText("");
            jTextFieldEmail.setText("");
            jTextFieldAddress.setText("");
            jTextAreaMessage.setText("");

            DefaultTableModel tbAllModel = (DefaultTableModel) jTableAll.getModel();
            tbAllModel.setRowCount(0);
            DefaultTableModel tbAcceptedModel = (DefaultTableModel) jTableAccepted.getModel();
            tbAcceptedModel.setRowCount(0);
            DefaultTableModel tbInquiredModel = (DefaultTableModel) jTableInquired.getModel();
            tbInquiredModel.setRowCount(0);
            DefaultTableModel tbPartappModel = (DefaultTableModel) jTablePartapp.getModel();
            tbPartappModel.setRowCount(0);
            DefaultTableModel tbAppliedModel = (DefaultTableModel) jTableApplied.getModel();
            tbAppliedModel.setRowCount(0);
            DefaultTableModel tbCommittedModel = (DefaultTableModel) jTableCommitted.getModel();
            tbCommittedModel.setRowCount(0);
            DefaultTableModel tbCompletedModel = (DefaultTableModel) jTableCompleted.getModel();
            tbCompletedModel.setRowCount(0);
            DefaultTableModel tbDepositModel = (DefaultTableModel) jTableDeposit.getModel();
            tbDepositModel.setRowCount(0);
            //table all
            String sql = "SELECT student.id,CONCAT(student.first, ' ', student.last) As name,status.statusChange,statusDate,completed FROM student LEFT JOIN status ON student.id = status.id";
            ResultSet rs = myStmt.executeQuery(sql);

            while (rs.next()) {
                
                String id = rs.getString("student.id");
                String name = rs.getString("name");
                String status = rs.getString("status.statusChange");
                String date = rs.getString("statusDate");
                String completed = rs.getString("completed");
                boolean Completed = false;
                if (completed.equals("y")) {
                    Completed = true;
                }

                Object[] row = {id,name, status, date, Completed};
                tbAllModel.addRow(row);
                //2
                if (status.equalsIgnoreCase("accepted")) {
                    tbAcceptedModel.addRow(row);
                }

                //3
                if (status.equalsIgnoreCase("applied")) {
                    tbAppliedModel.addRow(row);
                }

                //4
                if (status.equalsIgnoreCase("committed")) {
                    tbCommittedModel.addRow(row);
                }

                //5
                if (status.equalsIgnoreCase("completed")) {
                    tbCompletedModel.addRow(row);
                }

                //6
                if (status.equalsIgnoreCase("deposit")) {
                    tbDepositModel.addRow(row);
                }

                //7
                if (status.equalsIgnoreCase("inquired")) {
                    tbInquiredModel.addRow(row);
                }

                //8
                if (status.equalsIgnoreCase("partapp")) {
                    tbPartappModel.addRow(row);
                }
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jRadioButtonAllActionPerformed

    private void jTableAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAllMouseClicked
        // TODO add your handling code here:
        try {

            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableAll.getSelectedRow();
            TableModel AllModel = jTableAll.getModel();
            String id = AllModel.getValueAt(i, 0).toString();
            String name = AllModel.getValueAt(i, 1).toString();
            String status = AllModel.getValueAt(i, 2).toString();

            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);

                }
            }

        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTableAllMouseClicked

    private void jTableAcceptedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAcceptedMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableAccepted.getSelectedRow();
            TableModel AcceptedModel = jTableAccepted.getModel();
            String id = AcceptedModel.getValueAt(i, 0).toString();
            String name = AcceptedModel.getValueAt(i, 1).toString();
            String status = AcceptedModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);

                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTableAcceptedMouseClicked

    private void jTableInquiredMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInquiredMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableInquired.getSelectedRow();
            TableModel InquiredModel = jTableInquired.getModel();
            String id = InquiredModel.getValueAt(i, 0).toString();
            String name = InquiredModel.getValueAt(i, 1).toString();
            String status = InquiredModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTableInquiredMouseClicked

    private void jTablePartappMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePartappMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTablePartapp.getSelectedRow();
            TableModel PartappModel = jTablePartapp.getModel();
            String id = PartappModel.getValueAt(i, 0).toString();
            String name = PartappModel.getValueAt(i, 1).toString();
            String status = PartappModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTablePartappMouseClicked

    private void jTableAppliedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAppliedMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableApplied.getSelectedRow();
            TableModel AppliedModel = jTableApplied.getModel();
            String id = AppliedModel.getValueAt(i, 0).toString();
            String name = AppliedModel.getValueAt(i, 1).toString();
            String status = AppliedModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }

    }//GEN-LAST:event_jTableAppliedMouseClicked

    private void jTableCommittedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCommittedMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableCommitted.getSelectedRow();
            TableModel CommittedModel = jTableCommitted.getModel();
            String id = CommittedModel.getValueAt(i, 0).toString();
            String name = CommittedModel.getValueAt(i, 1).toString();
            String status = CommittedModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id,CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTableCommittedMouseClicked

    private void jTableCompletedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCompletedMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableCompleted.getSelectedRow();
            TableModel CompletedModel = jTableCompleted.getModel();
            String id = CompletedModel.getValueAt(i, 0).toString();
            String name = CompletedModel.getValueAt(i, 1).toString();
            String status = CompletedModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTableCompletedMouseClicked

    private void jTableDepositMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDepositMouseClicked
        // TODO add your handling code here:
        try {
            Statement myStmt = TEST.getCon().createStatement();

            int i = jTableDeposit.getSelectedRow();
            TableModel DepositModel = jTableDeposit.getModel();
            String id = DepositModel.getValueAt(i, 0).toString();
            String name = DepositModel.getValueAt(i, 1).toString();
            String status = DepositModel.getValueAt(i, 2).toString();

            //ResultSet rs2 = myStmt,executeQuery("SELECT * FROM message;");
            ResultSet rs2 = myStmt.executeQuery("SELECT * FROM message");

            while (rs2.next()) {
                String DBmessage = rs2.getString("msg");
                String DBstatus = rs2.getString("statusChange");
                String DBaction = rs2.getString("action");
                if (DBstatus.equalsIgnoreCase(status)) {
                    jTextAreaMessage.setText(name + " " + DBmessage);
                    jTextFieldAction.setText(DBaction);
                }
            }

            ResultSet rs3 = myStmt.executeQuery("SELECT student.id, CONCAT(student.first, ' ', student.last) AS name,student.cellNum,student.homeNum,student.address1,student.email FROM student;");
            while (rs3.next()) {

                String DBid = rs3.getString("student.id");

                if (id.equals(DBid)) {
                    String DBcellphone = rs3.getString("cellNum");
                    jTextFieldCellNum.setText(DBcellphone);
                    String DBHomephone = rs3.getString("homeNum");
                    jTextFieldHomeNum.setText(DBHomephone);
                    String DBEmail = rs3.getString("email");
                    jTextFieldEmail.setText(DBEmail);
                    String DBaddress1 = rs3.getString("address1");
                    jTextFieldAddress.setText(DBaddress1);
                }
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }
    }//GEN-LAST:event_jTableDepositMouseClicked

    private void jButtonCopyEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyEmailActionPerformed
        // TODO add your handling code here:
        String email = jTextFieldEmail.getText();
        StringSelection stringSelection = new StringSelection(email);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_jButtonCopyEmailActionPerformed

    private void jButtonCopyAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyAddressActionPerformed
        // TODO add your handling code here:
        String address = jTextFieldAddress.getText();
        StringSelection stringSelection = new StringSelection(address);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_jButtonCopyAddressActionPerformed

    private void jButtonCopyMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyMsgActionPerformed
        // TODO add your handling code here:
        String msg = jTextAreaMessage.getText();
        StringSelection stringSelection = new StringSelection(msg);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_jButtonCopyMsgActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        // TODO add your handling code here:
        try {
            String getaction = jTextFieldAction.getText();
            if (getaction.equalsIgnoreCase("email")) {
                System.out.println("Preparing to send email");

                Properties properties = new Properties();

                properties.put("mail.smtp.auth", "true");// mail.smtp.auth
                properties.put("mail.smtp.starttls.enable", "true");// mail.smtp.starttles.enable
                properties.put("mail.smtp.host", "smtp.office365.com");// mail.smtp.host
                properties.put("mail.smtp.port", "587");// mail.smtp.port

                String myAccountEmail = "yzz0214@auburn.edu";//use your account
                String password = "235689@Xzyz19950605";//use your account                

                Session session = Session.getInstance(properties, new Authenticator() {
                    @Override
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(myAccountEmail, password);
                    }

                });
                System.out.println("Good!");

                String recepient = jTextFieldEmail.getText();
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress(myAccountEmail));
                message.setRecipient(Message.RecipientType.TO, new InternetAddress(recepient));
                message.setSubject("Auto sending Email");
                String text = jTextAreaMessage.getText();
                message.setText(text);

//
                Transport.send(message);
//
                System.out.println("Message sent successfully!");
                JOptionPane.showMessageDialog(null, "Email is sended successful");
//            
            } else {
                JOptionPane.showMessageDialog(null, "This is not email sending option");
            }
        } catch (Exception exc) {
            exc.printStackTrace();
        }

    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        // TODO add your handling code here:
        JFrame1 jf1 = new JFrame1();
        jf1.show();
        
        
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    public class CheckBoxModelListener implements TableModelListener {
        //private static final int BOOLEAN_COLUMN = 3;

        public void tableChanged(TableModelEvent e) {

            try {
                Statement myStmt = TEST.getCon().createStatement();

                int row = e.getFirstRow();
                int column = e.getColumn();

                if (column == 4) {
                    TableModel model = (TableModel) e.getSource();
                    //String columnName = model.getColumnName(column);
                    Boolean checked = (Boolean) model.getValueAt(row, column);
                    String id = (String) model.getValueAt(row, 0);
                    String name = (String) model.getValueAt(row, 1);
                    String status = (String) model.getValueAt(row, 2);
                    //System.out.println("name: " + status);
                    String date = (String) model.getValueAt(row, 3);
                    //System.out.println("name: " + date);

                    if (checked) {
                        myStmt.executeUpdate("UPDATE status set completed = 'y' where status.statusChange = '" + status + "'and statusDate = '" + date + "' and status.id = '" + id + "'");
                        System.out.println(id + name + ": check box " + true);
                    } else {
                        myStmt.executeUpdate("UPDATE status set completed = 'n' where status.statusChange = '" + status + "'and statusDate = '" + date + "' and status.id = '" + id + "'");
                        System.out.println(id + name + ": check box " + false);
                    }
                }

            } catch (Exception exc) {
                exc.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDisplay;
    private javax.swing.JButton jButtonCopyAddress;
    private javax.swing.JButton jButtonCopyEmail;
    private javax.swing.JButton jButtonCopyMsg;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelAction;
    private javax.swing.JLabel jLabelAddress;
    private javax.swing.JLabel jLabelCellNum;
    private javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelHomeNum;
    private javax.swing.JLabel jLabelMessage;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButtonAll;
    private javax.swing.JRadioButton jRadioButtonCompleted;
    private javax.swing.JRadioButton jRadioButtonNotCompleted;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneAccepted;
    private javax.swing.JScrollPane jScrollPaneAll;
    private javax.swing.JScrollPane jScrollPaneApplied;
    private javax.swing.JScrollPane jScrollPaneCommitted;
    private javax.swing.JScrollPane jScrollPaneCompleted;
    private javax.swing.JScrollPane jScrollPaneDeposit;
    private javax.swing.JScrollPane jScrollPaneInquired;
    private javax.swing.JScrollPane jScrollPanePartapp;
    private javax.swing.JTabbedPane jTabbedPaneStatusChange;
    private javax.swing.JTable jTableAccepted;
    private javax.swing.JTable jTableAll;
    private javax.swing.JTable jTableApplied;
    private javax.swing.JTable jTableCommitted;
    private javax.swing.JTable jTableCompleted;
    private javax.swing.JTable jTableDeposit;
    private javax.swing.JTable jTableInquired;
    private javax.swing.JTable jTablePartapp;
    private javax.swing.JTextArea jTextAreaMessage;
    private javax.swing.JTextField jTextFieldAction;
    private javax.swing.JTextField jTextFieldAddress;
    private javax.swing.JTextField jTextFieldCellNum;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldHomeNum;
    // End of variables declaration//GEN-END:variables
}
